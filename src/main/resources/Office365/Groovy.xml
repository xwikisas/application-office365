<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="Office365.Groovy" locale="">
  <web>Office365</web>
  <name>Groovy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Office365.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Office 365 Groovy Code</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>plain/1.0</syntaxId>
  <hidden>true</hidden>
  <content>import com.microsoft.aad.adal4j.*;
import java.util.concurrent.*
import com.nimbusds.openid.connect.sdk.*;
import org.apache.http.*;
import org.apache.http.auth.*;
import org.apache.http.client.*;
import org.apache.http.client.methods.*;
import org.apache.http.client.params.*;
import org.apache.http.impl.client.*;
import org.apache.http.util.*;
import org.apache.http.params.*;
import org.apache.http.message.*;
import org.apache.http.client.entity.*;
import org.apache.http.protocol.HTTP;
import org.apache.http.client.utils.*;
import com.google.gson.Gson;
import com.xpn.xwiki.web.Utils;
import org.xwiki.context.Execution;
import org.xwiki.script.service.ScriptService;


public class AzureAuth {

 def authDomain = "login.windows.net"
 def apiVersion = "1.0"

 def forceDebug = false;

 def tenant;
 def azureClientID;
 def azureSecret;
 def sites;

 def authority = "https://${authDomain}"
 
 def CONFIG_PAGE = "Office365.Office365Config";
 def CONFIG_CLASS = "Office365.Office365ConfigClass";

 def AZURE_DATA_FIELD = "azuredata"
 def AZURE_PARAM_ERROR = "error";
 def AZURE_PARAM_ERROR_DESCRIPTION = "error_description";
 def AZURE_PARAM_ERROR_URI = "error_uri";
 def AZURE_PARAM_ID_TOKEN = "id_token";
 def AZURE_PARAM_CODE = "code";
 def AUTH_PAGE = "Office365.OAuth";
 def AZURE_SESSION_REDIRECT = "azure_redirect";
 def REDIRECT_URI = "";


 def debugStr = ""

 def xwiki;
 def xcontext;
 def doc;
 def renderingService;
 def localizationService;
 def request;
 def response;

 def authFailed = false;

 def getConfig(name) {
  def config = "";
  def configdoc = xwiki.getDocument(CONFIG_PAGE);
  configdoc.use(CONFIG_CLASS);
  def obj = configdoc.getDocument().getObject(CONFIG_CLASS);
  if (obj!=null) {
   config = (obj.get(name)!=null) ? obj.get(name).getValue() : "";
  }
  if (config=="") {
   configdoc = xwiki.getDocument("xwiki:" + CONFIG_PAGE);
   configdoc.use(CONFIG_CLASS);
   obj = configdoc.getDocument().getObject(CONFIG_CLASS);
   if (obj!=null) {
     config = (obj.get(name)!=null) ? obj.get(name).getValue() : "";
   }
  }
  debug("Found config: ${name} -&gt; ${config}");
  return config;
 }

 def debug(msg) {
  debugStr += msg + "\n";
 }

 def renderErrorFromResponse(res, message) {
  def errorMsg = res.error.message;
  def displayMsg = """${localizationService.render(message)} ${errorMsg}""";
  return """{{error}}${renderingService.escape(displayMsg, doc.getSyntax())}{{/error}}""";
 }

 def showDebug() {
  if (request.debug || forceDebug)
    return "== DEBUG ==\n\n {{{ ${debugStr} }}}"
  else
    return "";
 }

 def getMap(text) {
  def map = new HashMap(); 
  if (text==null||text.trim()=="")
   return map;
  def list = text.split("\n")
  for (item in list) {
   def values = item.split("=")
   if (values.length==2)
     map.put(values[0].trim(), values[1].trim())
  } 
  return map;
 }

 def setXWiki(xwiki, xcontext, doc) {
   this.xwiki = xwiki;
   this.xcontext = xcontext;
   this.request = xcontext.request;
   this.response = xcontext.response;
   this.doc = doc;
   this.renderingService = Utils.getComponent(ScriptService.class, "rendering");
   this.localizationService = Utils.getComponent(ScriptService.class, "localization");

   this.tenant = getConfig("tenant");
   this.azureClientID = getConfig("clientid");
   this.azureSecret = getConfig("secret");
   this.sites = getMap(getConfig("sites"));

   this.REDIRECT_URI = xwiki.getDocument(AUTH_PAGE).getExternalURL("view");
 }

 def isAuthenticated(request) {
  def azureData = request.getSession().getAttribute(AZURE_DATA_FIELD);
  if (azureData==null || azureData.authResult==null || azureData.nbfails &gt; 3)
    return false
  else 
    return true;
 }

 def getAuthentication(request) {
  def azureData = request.getSession().getAttribute(AZURE_DATA_FIELD);
  if (azureData==null || azureData.authResult==null) 
    return null
  else
    return azureData.authResult;
 }

 def clearAuthentication(request) {
  def azureData = request.getSession().getAttribute(AZURE_DATA_FIELD);
  if (azureData!=null) {
    azureData.authResult = null;
    azureData.nbfails = 0;
    azureData.user = "";
  }
}

 def storeAuthentication(request, authResult) {
  def azureData = [ "user": "", "authResult" : authResult, "nbfails" : 0]
  request.getSession().setAttribute(AZURE_DATA_FIELD, azureData);
 }

 def storeFailedAuthentication(request) {
  def currentAuthResult = request.getSession().getAttribute(AZURE_DATA_FIELD);
  debug("Read auth data: {{{ ${currentAuthResult} }}}")
  def azureData = [ "user": "", "authResult" : (currentAuthResult==null) ? null : currentAuthResult.authResult, "nbfails" : (currentAuthResult==null) ? 1 : currentAuthResult.nbfails+1]
  debug("Storing failed auth: {{{ ${azureData} }}}")
  request.getSession().setAttribute(AZURE_DATA_FIELD, azureData);
 }

 def hasTooManyFailedAuthentication(request) {
  def azureData = request.getSession().getAttribute(AZURE_DATA_FIELD);
  debug("Azure data: ${azureData}")
  if (azureData!=null &amp;&amp; azureData.nbfails &gt; 3) {
     debug("Too many fails: ${azureData.nbfails}")
     return true;
  } else { 
     return false;
  }
 }


 def containsAuthenticationData(request) {
   def map = request.getParameterMap();
   return request.getMethod().equalsIgnoreCase("POST") &amp;&amp; (request.getParameterMap().containsKey(AZURE_PARAM_ERROR)
           || request.getParameterMap().containsKey(AZURE_PARAM_ID_TOKEN) 
           || request.getParameterMap().containsKey(AZURE_PARAM_CODE));
 }

 def isAuthenticationSuccessful(AuthenticationResponse authResponse) {
    debug("Result: ${authResponse}");
    return authResponse instanceof AuthenticationSuccessResponse;
 }

 def allowRedirect() {
   try {
     Utils.getComponent(Execution.class).getContext().setProperty("bypassDomainSecurityCheck", true);
   } catch (Exception ex) {
     debug(ex.toString());
   }
 }

 def getRedirectURL() {
   def state = "";
   if (doc.fullName!="Office365.OAuth") {
     def finalRedirect = request.getRequestURL().toString();
     def qs = request.getQueryString();
     if (qs!=null &amp; qs!="")
      finalRedirect += "?" + qs;
     finalRedirect = finalRedirect.replaceAll("clearAuth=1","");
     request.getSession().setAttribute(AZURE_SESSION_REDIRECT, finalRedirect);
   }

        def redirectUrl = "${authority}/${tenant}/oauth2/authorize?response_type=code%20id_token";
        def params = new HashMap();
        params.put("scope", " Files.ReadWrites User.Read User.ReadWriteUser.ReadBasic.All" +
                " Files.ReadWrite Files.ReadWrite.All Files.ReadWrite.AppFolder" +
                " Sites.ReadWrite.All");
        params.put("response_mode", "form_post");
        params.put("redirect_uri", REDIRECT_URI);
        params.put("client_id", azureClientID);
        params.put("nonce", UUID.randomUUID().toString());
        params.entrySet().each { redirectUrl += "&amp;${it.key}=${URLEncoder.encode(it.value,'UTF-8')}"};
        return redirectUrl;
 }

 def getAccessToken(authorizationCode, currentUri) {
  def authCode = authorizationCode.getValue();
  def credential = new ClientCredential(azureClientID, azureSecret);
  def authContext = null;
  def result = null;
  def service = null;
  try {
      service = Executors.newFixedThreadPool(1);
      authContext = new AuthenticationContext(authority + "/" + tenant, true, service);
      def future = authContext.acquireTokenByAuthorizationCode(authCode, 
        new URI(currentUri), credential, "https://graph.microsoft.com", null);
      result = future.get();
  } catch (ExecutionException e) {
      debug "Exception: " + e; 
      return null;
  } finally {
            service.shutdown();
  }

  return result;
 }


 def Map getHTTPData(url, accessToken) {
  def json = ""
  debug("HTTP start");
  try {
    // Set up an HTTP client that makes a connection to REST API.
    DefaultHttpClient client = new DefaultHttpClient();

    HttpGet httpRequest = new HttpGet(url);
    httpRequest.setHeader("Authorization", accessToken);
    httpRequest.setHeader("api-version", apiVersion);
    httpRequest.setHeader("Accept", "application/json");
    debug("HTTP running query: " + url);
    HttpResponse httpResponse = client.execute(httpRequest);
    debug("HTTP reading data");
    json = EntityUtils.toString(httpResponse.getEntity());

    debug("HTTP reading json");
    def gson = new Gson();
    def data = gson.fromJson(json, Map.class);
    debug("HTTP done reading json");
    if (data.error &amp;&amp; data.error.code=='InvalidAuthenticationToken') {
      debug("Error result. Trying again");
      clearAuthentication(request);
      authenticate();
    }
    return data;
   } catch (e) {
      debug("Exception executing query: ${e.getMessage()}");
      debug("JSON: ${json}")
      e.printStackTrace();
      return null;
   }
   debug("HTTP end");
  }


 def getGraphApiData(url) {
   def authResult = getAuthentication(request)
   if (authResult==null)
     return null
   return getHTTPData(url, "Bearer " + authResult.getAccessToken())
 }

 def authenticate() {
  // this allows to clear auth before retrying
  if (request.clearAuth) {
    clearAuthentication(request);
  }

  if (hasTooManyFailedAuthentication(request)) {
     debug("Too many auth failures. Stopping"); 
     return false;
  }
  
  def requestURL = xwiki.getRequestURL()
  if (isAuthenticated(request)) {
   debug("Step 3: We are authenticated");
  } else if (containsAuthenticationData(request)) {
   debug("Step 2: We received auth data");
   for (paramName in request.getParameterNames()) {
     debug("DEBUG: * ${paramName}: {{{ ${request.getParameter(paramName)} }}}")
   }

   def paramMap = request.getParameterMap()
   def params = new HashMap();
   for (key in paramMap.keySet()) {
    params.put(key, [paramMap.get(key)[0]])
   }
   def  authResponse = AuthenticationResponseParser.parse(new URI(requestURL), params);
   if (isAuthenticationSuccessful(authResponse)) {
     debug("Step 2a: Auth came back")

     def oidcResponse = (AuthenticationSuccessResponse) authResponse;
     def authResult = getAccessToken(authResponse.getAuthorizationCode(), requestURL)
     if (authResult==null) {
       debug("Step 2b: Failed to get access token")
       storeFailedAuthentication(request);
       return false;
     } else {
       debug("Step 2b: Got access token succesfully")
       storeAuthentication(request, authResult);
       def session = request.getSession();
       def url = session.getAttribute(AZURE_SESSION_REDIRECT);
       if (url &amp;&amp; url.length() &gt;= 0) {
         debug("Redirecting to final destination after authorization: ${url}")
         allowRedirect();
         response.sendRedirect(url)
         session.remove(AZURE_SESSION_REDIRECT)
         return true;
       }
     }
     return true;                  
   } else {
     debug("Step 2b: Auth failed");
     storeFailedAuthentication(request);
     return false;
   }
  } else {
     def redirUrl = getRedirectURL()
     debug("STEP 1: Redirect: ${redirUrl}");
     storeFailedAuthentication(request);
     if (!request.noredirect) {
      allowRedirect();
       response.sendRedirect(redirUrl)
     }
     return false;
  }
 }
}
</content>
</xwikidoc>
